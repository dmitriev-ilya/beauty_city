# Generated by Django 4.1.7 on 2023-05-24 11:57

import beautyapp.models
import beautyapp.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('code', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Master',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='имя мастера')),
                ('last_name', models.CharField(max_length=100, verbose_name='фамилия мастера')),
                ('rating_image', models.FileField(blank=True, help_text='Хардкод пока нет реальных отзывов', null=True, upload_to='', validators=[beautyapp.validators.validate_svg_file_extension], verbose_name='картинка оценки')),
                ('review_count', models.PositiveSmallIntegerField(help_text='Хардкод пока нет реальных отзывов', verbose_name='количество отзывов')),
                ('avatar', models.FileField(blank=True, null=True, upload_to='', validators=[beautyapp.validators.validate_svg_file_extension], verbose_name='фото мастера')),
                ('start_experience_date', models.DateField(help_text='для расчета стажа', verbose_name='дата начала рабочего стажа')),
            ],
            options={
                'verbose_name': 'мастер',
                'verbose_name_plural': 'мастера',
            },
        ),
        migrations.CreateModel(
            name='MasterSpeciality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
            ],
            options={
                'verbose_name': 'специальность',
                'verbose_name_plural': 'специальности',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
            ],
            options={
                'verbose_name': 'тип платежа',
                'verbose_name_plural': 'типы платежей',
            },
        ),
        migrations.CreateModel(
            name='Promo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, verbose_name='название компании')),
                ('description', models.CharField(blank=True, max_length=500, verbose_name='описание компании')),
                ('code', models.CharField(max_length=20, verbose_name='промо код')),
                ('is_active', models.BooleanField(default=False, verbose_name='статус активности')),
                ('percent', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='скидка в процентах')),
                ('absolute', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='абсолютная скидка')),
            ],
        ),
        migrations.CreateModel(
            name='Saloon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('address', models.CharField(max_length=200, verbose_name='адрес')),
                ('city', models.CharField(max_length=100, verbose_name='город')),
                ('avatar', models.FileField(blank=True, null=True, upload_to='', validators=[beautyapp.validators.validate_svg_file_extension], verbose_name='заглавное фото салона')),
            ],
            options={
                'verbose_name': 'салон красоты',
                'verbose_name_plural': 'салоны красоты',
            },
        ),
        migrations.CreateModel(
            name='SaloonMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saloonlinks', to='beautyapp.master')),
                ('saloon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='masterlinks', to='beautyapp.saloon')),
            ],
            options={
                'verbose_name': 'расписание мастера по дням недели',
                'verbose_name_plural': 'расписания мастера по дням недели',
            },
        ),
        migrations.CreateModel(
            name='ServiceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
                ('order', models.IntegerField(help_text='чем меньше число, тем раньше', verbose_name='порядок отображения группы')),
            ],
            options={
                'verbose_name': 'группа услуг',
                'verbose_name_plural': 'группы услуг',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='название')),
                ('avatar', models.FileField(blank=True, null=True, upload_to='', validators=[beautyapp.validators.validate_svg_file_extension], verbose_name='заглавное фото услуги')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], verbose_name='цена')),
                ('order', models.IntegerField(help_text='чем меньше число, тем раньше', verbose_name='порядок отображения внутри группы')),
                ('duration_in_minutes', models.PositiveSmallIntegerField(help_text='чтобы понимать при записи ближайшее свободное время', verbose_name='длительность услуги в минутах')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='services', to='beautyapp.servicegroup')),
            ],
            options={
                'verbose_name': 'услуга',
                'verbose_name_plural': 'услуги',
            },
        ),
        migrations.CreateModel(
            name='SaloonMasterWeekday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isoweekday', models.CharField(choices=[('1', 'Monday'), ('2', 'Tuesday'), ('3', 'Wednesday'), ('4', 'Thursday'), ('5', 'Friday'), ('6', 'Saturday'), ('7', 'Sunday')], max_length=9, verbose_name='день недели по ISO')),
                ('saloonmaster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekdays', to='beautyapp.saloonmaster')),
            ],
            options={
                'verbose_name': 'рабочий день мастера',
                'verbose_name_plural': 'рабочие дни мастера',
            },
        ),
        migrations.AddField(
            model_name='saloon',
            name='masters',
            field=models.ManyToManyField(through='beautyapp.SaloonMaster', to='beautyapp.master'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата и время создания счета')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='дата и время платежа')),
                ('status', models.CharField(choices=[('Отменен', 'Cancelled'), ('Оплачен', 'Paid'), ('Создан', 'Created')], max_length=10, verbose_name='статус платежа')),
                ('ptype', models.ForeignKey(default=beautyapp.models.PaymentType.get_default_pk, on_delete=django.db.models.deletion.DO_NOTHING, related_name='payments', to='beautyapp.paymenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'платеж',
                'verbose_name_plural': 'платежи',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0)], verbose_name='цена без промо')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата и время создания записи')),
                ('date', models.DateField(verbose_name='дата записи')),
                ('stime', models.TimeField(verbose_name='время начала')),
                ('etime', models.TimeField(verbose_name='время окончания')),
                ('master', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notes', to='beautyapp.master')),
                ('payment', models.OneToOneField(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='beautyapp.payment')),
                ('promo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='notes', to='beautyapp.promo')),
                ('saloon', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notes', to='beautyapp.saloon')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notes', to='beautyapp.service')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'запись',
                'verbose_name_plural': 'записи',
            },
        ),
        migrations.AddField(
            model_name='master',
            name='services',
            field=models.ManyToManyField(related_name='masters', to='beautyapp.service'),
        ),
        migrations.AddField(
            model_name='master',
            name='speciality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='masters', to='beautyapp.masterspeciality'),
        ),
    ]
